#if UNITY_EDITOR
using UnityEditor;
#endif

using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI; // –¥–ª—è Button —Ç–∞ LayoutRebuilder

public sealed class PlantSelectionPanel : MonoBehaviour
{
    [Header("UI wiring")]
    [SerializeField] private GameObject root;                    // –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–Ω–µ–ª—ñ
    [SerializeField] private Transform content;                  // ScrollView/Viewport/Content
    [SerializeField] private PlantOptionItemView itemPrefab;     // –ø—Ä–µ—Ñ–∞–± –∫–∞—Ä—Ç–∫–∏
    [SerializeField] private GameObject infobar;                 // —ñ–Ω—Ñ–æ–±–∞—Ä (—Ö–æ–≤–∞—î–º–æ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ)
    [SerializeField] private Button closeButton;                 // üëà –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–∞–Ω–µ–ª—ñ

    [Header("Behaviour")]
    [SerializeField] private bool buildOnEnableIfDataReady = false;

    // –∫–µ—à –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    List<PlantInfo> _all;
    int _playerLevel;
    Action<PlantInfo> _onPlant;
    readonly Stack<PlantOptionItemView> _pool = new();

    // –∑—Ä—É—á–Ω–æ –∑–Ω–∞—Ç–∏, —á–∏ –ø–∞–Ω–µ–ª—å –≤—ñ–¥–∫—Ä–∏—Ç–∞
    bool IsOpen => root != null && root.activeInHierarchy;

    void OnEnable()
    {
        // –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
        if (closeButton != null)
        {
            closeButton.onClick.RemoveAllListeners();
            closeButton.onClick.AddListener(Close);
        }

        // –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω—É —Å–µ—Å—ñ—ó
        if (PlayerSession.I != null)
        {
            _playerLevel = ResolvePlayerLevelFallback(_playerLevel);
            PlayerSession.I.OnChanged += HandlePlayerSessionChanged;
        }

        if (!buildOnEnableIfDataReady) return;
        if (root != null && !root.activeSelf) return; // —è–∫—â–æ root —ñ–Ω—à–∏–π –æ–±‚Äô—î–∫—Ç
        if (_all != null && _all.Count > 0) BuildList();
    }

    void OnDisable()
    {
        if (closeButton != null)
            closeButton.onClick.RemoveAllListeners();

        if (PlayerSession.I != null)
            PlayerSession.I.OnChanged -= HandlePlayerSessionChanged;
    }

    // –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–º –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
    public void SetData(List<PlantInfo> all, int playerLevel, Action<PlantInfo> onPlant)
    {
        _all = all;
        _onPlant = onPlant;

        // —è–∫—â–æ —î PlayerSession ‚Äî –±–µ—Ä–µ–º–æ –∑–≤—ñ–¥—Ç–∏ —Ä—ñ–≤–µ–Ω—å, —ñ–Ω–∞–∫—à–µ –ø–µ—Ä–µ–¥–∞–Ω–∏–π
        _playerLevel = ResolvePlayerLevelFallback(playerLevel);
    }

    public void Show()
    {
        if (root != null) root.SetActive(true);
        if (infobar != null) infobar.SetActive(false);
        BuildList();
    }

    public void Close()
    {
        if (root != null) root.SetActive(false);
        if (infobar != null) infobar.SetActive(true);
    }

    // --- —Ä–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–º—ñ–Ω—É –¥–∞–Ω–∏—Ö —Å–µ—Å—ñ—ó ---
    void HandlePlayerSessionChanged()
    {
        int newLvl = ResolvePlayerLevelFallback(_playerLevel);
        if (newLvl != _playerLevel)
        {
            _playerLevel = newLvl;
            if (IsOpen && _all != null && _all.Count > 0)
                BuildList();
        }
    }

    int ResolvePlayerLevelFallback(int fallback)
    {
        var s = PlayerSession.I;
        if (s != null && s.Data != null)
            return Mathf.Max(1, s.Data.playerlvl);
        return Mathf.Max(1, fallback);
    }

    // --- –ø–æ–±—É–¥–æ–≤–∞ —Å–ø–∏—Å–∫—É ---
    void BuildList()
    {
        if (content == null || itemPrefab == null)
        {
            Debug.LogError("[PlantSelectionPanel] content/itemPrefab –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ", this);
            return;
        }
        if (_all == null)
        {
            Debug.LogWarning("[PlantSelectionPanel] –î–∞–Ω—ñ —â–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ñ (SetData –Ω–µ –≤–∏–∫–ª–∏–∫–∞–Ω–æ)", this);
            ClearContent();
            return;
        }

        ClearContent();

        // 0) —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ
        var source = _all.Where(p => p.IsActive).ToList();

        // 1) —Å–∞–º–µ (playerLevel + 1); —è–∫—â–æ –Ω–µ–º–∞—î ‚Äî –Ω–∞–π–±–ª–∏–∂—á–∞ –±—ñ–ª—å—à–∞
        var exactNext = source.FirstOrDefault(p => p.UnlockLevel == _playerLevel + 1);
        var fallbackNext = source.Where(p => p.UnlockLevel > _playerLevel)
                                 .OrderBy(p => p.UnlockLevel)
                                 .FirstOrDefault();
        var nextLocked = exactNext ?? fallbackNext;

        // 2) –¥–æ—Å—Ç—É–ø–Ω—ñ –∑–∞—Ä–∞–∑ (‚â§ —Ä—ñ–≤–Ω—è), –≤—ñ–¥ –Ω–∞–π–≤–∏—â–æ–≥–æ –¥–æ –Ω–∞–π–Ω–∏–∂—á–æ–≥–æ
        var available = source.Where(p => p.UnlockLevel <= _playerLevel)
                              .OrderByDescending(p => p.UnlockLevel);

        // --- –í–∏–≤—ñ–¥ ---
        if (nextLocked != null)
            AddItem(nextLocked, unlocked: false);   // —Ç—ñ–ª—å–∫–∏ –û–î–ù–ê –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∑–≤–µ—Ä—Ö—É

        foreach (var p in available)
            AddItem(p, unlocked: true);
    }

    void AddItem(PlantInfo data, bool unlocked)
    {
        PlantOptionItemView view;
        if (_pool.Count > 0)
        {
            view = _pool.Pop();
            view.transform.SetParent(content, false);
            view.gameObject.SetActive(true);
        }
        else
        {
            view = Instantiate(itemPrefab, content);
        }

        view.Bind(data, unlocked, _onPlant);
    }

    void ClearContent()
    {
#if UNITY_EDITOR
        if (Selection.activeTransform != null && content != null && Selection.activeTransform.IsChildOf(content))
            Selection.activeObject = null;
#endif
        if (content == null) return;

        for (int i = content.childCount - 1; i >= 0; i--)
        {
            var child = content.GetChild(i).gameObject;
            child.SetActive(false);
            child.transform.SetParent(transform, false); // —Ç–∏–º—á–∞—Å–æ–≤–æ –ø—ñ–¥ –ø–∞–Ω–µ–ª—å (–Ω–µ Content)
            var view = child.GetComponent<PlantOptionItemView>();
            if (view != null) _pool.Push(view);
        }
    }

    // –ø–æ–ø–µ—Ä–µ–¥–Ω—è –ø–æ–±—É–¥–æ–≤–∞ (—â–æ–± UI –º–∏—Ç—Ç—î–≤–æ –≤—ñ–¥–∫—Ä–∏–≤–∞–≤—Å—è)
    public void Prewarm(List<PlantInfo> all, int playerLevel, Action<PlantInfo> onPlant)
    {
        SetData(all, playerLevel, onPlant);
        BuildList();

        // –§–æ—Ä—Å–∏–º–æ –ª–µ–π–∞—É—Ç, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ root –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π
        if (content is RectTransform rt)
            LayoutRebuilder.ForceRebuildLayoutImmediate(rt);
    }
}
