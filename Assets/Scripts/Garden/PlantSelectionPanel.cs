namespace ClashFarm.Garden
{
#if UNITY_EDITOR
    using UnityEditor;
#endif

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;

    public sealed class PlantSelectionPanel : MonoBehaviour
    {
        [Header("UI wiring")]
        [SerializeField] private GameObject root;                    // –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–Ω–µ–ª—ñ
        [SerializeField] private Transform content;                  // ScrollView/Viewport/Content
        [SerializeField] private PlantOptionItemView itemPrefab;     // –ø—Ä–µ—Ñ–∞–± –∫–∞—Ä—Ç–∫–∏
        [SerializeField] private GameObject infobar;                 // —ñ–Ω—Ñ–æ–±–∞—Ä (—Ö–æ–≤–∞—î–º–æ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ)
        [SerializeField] private Button closeButton;                 // üëà –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–∞–Ω–µ–ª—ñ

        [Header("Behaviour")]
        [SerializeField] private bool buildOnEnableIfDataReady = false;

        [Header("Reveal")]
        [SerializeField] private CanvasGroup cg;       // CanvasGroup –Ω–∞ –∫–æ—Ä–µ–Ω—ñ –ø–∞–Ω–µ–ª—ñ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ, –∞–ª–µ –±–∞–∂–∞–Ω–æ)
        [SerializeField] private int warmTopCount = 8; // —Å–∫—ñ–ª—å–∫–∏ –ø–æ–∑–∏—Ü—ñ–π –ø—ñ–¥—ñ–≥—Ä—ñ–≤–∞—Ç–∏ –≤ –ø–∞–º'—è—Ç—å –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
        [SerializeField] private int warmTimeoutMs = 1200;

        // –∫–µ—à –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        List<PlantInfo> _all;
        int _playerLevel;
        Action<PlantInfo> _onPlant;
        readonly Stack<PlantOptionItemView> _pool = new();
        bool _prewarmed = false;  // –ø–∞–Ω–µ–ª—å —ñ —ñ–∫–æ–Ω–∫–∏ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ
        int _buildVersion = 0;                 // –≤–µ—Ä—Å—ñ—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ BuildList
        static int _buildFrame, _buildCount;   // –¥—Ä–æ—Å–µ–ª—ñ–Ω–≥ —ñ–Ω—Å—Ç–∞–Ω—Å–∏–Ω–≥—É
        const int _buildMaxPerFrame = 5;
        bool IsOpen => root != null && root.activeInHierarchy;

        void OnEnable()
        {
            // –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
            if (closeButton != null)
            {
                closeButton.onClick.RemoveAllListeners();
                closeButton.onClick.AddListener(Close);
            }

            // –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω—É —Å–µ—Å—ñ—ó
            if (PlayerSession.I != null)
            {
                _playerLevel = ResolvePlayerLevelFallback(_playerLevel);
                PlayerSession.I.OnChanged += HandlePlayerSessionChanged;
            }

            if (!buildOnEnableIfDataReady) return;
            if (root != null && !root.activeSelf) return; // —è–∫—â–æ root —ñ–Ω—à–∏–π –æ–±‚Äô—î–∫—Ç
            if (_all != null && _all.Count > 0) BuildList();
        }

        void OnDisable()
        {
            if (closeButton != null)
                closeButton.onClick.RemoveAllListeners();

            if (PlayerSession.I != null)
                PlayerSession.I.OnChanged -= HandlePlayerSessionChanged;
        }

        // –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–º –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
        public void SetData(List<PlantInfo> all, int playerLevel, Action<PlantInfo> onPlant)
        {
            _all = all;
            _onPlant = onPlant;

            // —è–∫—â–æ —î PlayerSession ‚Äî –±–µ—Ä–µ–º–æ –∑–≤—ñ–¥—Ç–∏ —Ä—ñ–≤–µ–Ω—å, —ñ–Ω–∞–∫—à–µ –ø–µ—Ä–µ–¥–∞–Ω–∏–π
            _playerLevel = ResolvePlayerLevelFallback(playerLevel);
        }
        public void Show()
        {
            if (!gameObject.activeInHierarchy) gameObject.SetActive(true);
            if (!gameObject.activeInHierarchy)
                gameObject.SetActive(true);

            StartCoroutine(ShowCo());
        }

        public void Close()
        {
            // (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º) –º–∏—Ç—Ç—î–≤–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å/–∞–ª—å—Ñ—É
            if (cg != null) { cg.alpha = 0f; cg.interactable = false; cg.blocksRaycasts = false; }

            if (root != null) root.SetActive(false);
            if (infobar != null) infobar.SetActive(true);

            // ‚Üê –≥–æ–ª–æ–≤–Ω–µ: –ø–æ–≤–Ω—ñ—Å—Ç—é —Ö–æ–≤–∞—î–º–æ GO –ø–∞–Ω–µ–ª—ñ
            gameObject.SetActive(false);
        }

        // --- —Ä–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–º—ñ–Ω—É –¥–∞–Ω–∏—Ö —Å–µ—Å—ñ—ó ---
        void HandlePlayerSessionChanged()
        {
            int newLvl = ResolvePlayerLevelFallback(_playerLevel);
            if (newLvl != _playerLevel)
            {
                _playerLevel = newLvl;
                if (IsOpen && _all != null && _all.Count > 0)
                    BuildList();
            }
        }

        int ResolvePlayerLevelFallback(int fallback)
        {
            var s = PlayerSession.I;
            if (s != null && s.Data != null)
                return Mathf.Max(1, s.Data.playerlvl);
            return Mathf.Max(1, fallback);
        }

        // --- –ø–æ–±—É–¥–æ–≤–∞ —Å–ø–∏—Å–∫—É ---
        void BuildList()
        {
            if (content == null || itemPrefab == null)
            {
                Debug.LogError("[PlantSelectionPanel] content/itemPrefab –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ", this);
                return;
            }
            if (_all == null)
            {
                Debug.LogWarning("[PlantSelectionPanel] –î–∞–Ω—ñ —â–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ñ (SetData –Ω–µ –≤–∏–∫–ª–∏–∫–∞–Ω–æ)", this);
                ClearContent();
                return;
            }

            ClearContent();

            // ‚Üë –Ω–æ–≤–µ: —Ñ—ñ–∫—Å—É—î–º–æ ‚Äú–≤–µ—Ä—Å—ñ—é‚Äù —Ü—å–æ–≥–æ –±—ñ–ª–¥—É
            _buildVersion++;
            int version = _buildVersion;

            // 0) —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ
            var source = _all.Where(p => p.IsActive).ToList();

            // 1) —Å–∞–º–µ (playerLevel + 1); —è–∫—â–æ –Ω–µ–º–∞—î ‚Äî –Ω–∞–π–±–ª–∏–∂—á–∞ –±—ñ–ª—å—à–∞
            var exactNext = source.FirstOrDefault(p => p.UnlockLevel == _playerLevel + 1);
            var fallbackNext = source.Where(p => p.UnlockLevel > _playerLevel)
                                    .OrderBy(p => p.UnlockLevel)
                                    .FirstOrDefault();
            var nextLocked = exactNext ?? fallbackNext;

            // 2) –¥–æ—Å—Ç—É–ø–Ω—ñ –∑–∞—Ä–∞–∑ (‚â§ —Ä—ñ–≤–Ω—è), –≤—ñ–¥ –Ω–∞–π–≤–∏—â–æ–≥–æ –¥–æ –Ω–∞–π–Ω–∏–∂—á–æ–≥–æ
            var available = source.Where(p => p.UnlockLevel <= _playerLevel)
                                .OrderByDescending(p => p.UnlockLevel);

            // --- –í–∏–≤—ñ–¥ ---
            if (nextLocked != null)
                StartCoroutine(CoAddItem(nextLocked, unlocked: false, version));   // —Ç—ñ–ª—å–∫–∏ –û–î–ù–ê –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∑–≤–µ—Ä—Ö—É

            foreach (var p in available)
                StartCoroutine(CoAddItem(p, unlocked: true, version));
        }

        void ClearContent()
        {
#if UNITY_EDITOR
            if (Selection.activeTransform != null && content != null && Selection.activeTransform.IsChildOf(content))
                Selection.activeObject = null;
#endif
            if (content == null) return;

            for (int i = content.childCount - 1; i >= 0; i--)
            {
                var child = content.GetChild(i).gameObject;
                child.SetActive(false);
                child.transform.SetParent(transform, false); // —Ç–∏–º—á–∞—Å–æ–≤–æ –ø—ñ–¥ –ø–∞–Ω–µ–ª—å (–Ω–µ Content)
                var view = child.GetComponent<PlantOptionItemView>();
                if (view != null) _pool.Push(view);
            }
        }

        // –ø–æ–ø–µ—Ä–µ–¥–Ω—è –ø–æ–±—É–¥–æ–≤–∞ (—â–æ–± UI –º–∏—Ç—Ç—î–≤–æ –≤—ñ–¥–∫—Ä–∏–≤–∞–≤—Å—è)
        public void Prewarm(List<PlantInfo> all, int playerLevel, Action<PlantInfo> onPlant)
        {
            SetData(all, playerLevel, onPlant);
            BuildList();

            // –§–æ—Ä—Å–∏–º–æ –ª–µ–π–∞—É—Ç, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ root –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π
            if (content is RectTransform rt)
                LayoutRebuilder.ForceRebuildLayoutImmediate(rt);
        }
        public void SetInteractable(bool v)
        {
            if (closeButton) closeButton.interactable = v;
            if (content != null)
            {
                for (int i = 0; i < content.childCount; i++)
                {
                    var btn = content.GetChild(i).GetComponentInChildren<UnityEngine.UI.Button>(true);
                    if (btn) btn.interactable = v;
                }
            }
        }
        System.Collections.IEnumerator PrewarmIconsCo()
        {
            // –∑–±–µ—Ä–µ–º–æ –∫–ª—é—á—ñ —ñ–∫–æ–Ω–æ–∫, —è–∫—ñ –±—É–¥–µ–º–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≤ –∫–∞—Ä—Ç–∫–∞—Ö (grown –Ω–∞–π—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ñ—à–∏–π)
            var keys = new HashSet<string>();
            if (_all != null)
            {
                foreach (var p in _all)
                {
                    if (!p.IsActive) continue;
                    if (!string.IsNullOrEmpty(p.IconGrown)) keys.Add(p.IconGrown);
                }
            }

            if (keys.Count == 0) yield break;

            var task = RemoteSpriteCache.PrefetchToDiskOnly(keys, maxParallel: 3, softTimeoutMs: 1500);
            while (!task.IsCompleted) yield return null;

            // –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ: —Å–∞–º—ñ –∫–∞—Ä—Ç–∫–∏ –ø—Ä–∏ Bind –±–µ—Ä—É—Ç—å —ñ–∑ –¥–∏—Å–∫–∞
        }
        System.Collections.IEnumerator CoAddItem(PlantInfo data, bool unlocked, int version)
        {
            // —è–∫—â–æ –ø—ñ–¥ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ä—Ç—É–≤–∞–≤ –Ω–æ–≤–∏–π –±—ñ–ª–¥ ‚Äî –Ω–µ –¥–æ–¥–∞—î–º–æ –Ω—ñ—á–æ–≥–æ
            if (version != _buildVersion) yield break;

            // –î—Ä–æ—Å–µ–ª—ñ–Ω–≥: –Ω–µ –±—ñ–ª—å—à —è–∫ N –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞ –∫–∞–¥—Ä
            while (true)
            {
                if (Time.frameCount != _buildFrame) { _buildFrame = Time.frameCount; _buildCount = 0; }
                if (_buildCount < _buildMaxPerFrame) { _buildCount++; break; }
                yield return null;
                if (version != _buildVersion) yield break; // –ø—ñ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
            }

            if (version != _buildVersion) yield break;

            PlantOptionItemView view;
            if (_pool.Count > 0)
            {
                view = _pool.Pop();
                view.transform.SetParent(content, false);
                view.gameObject.SetActive(true);
            }
            else
            {
                view = Instantiate(itemPrefab, content);
            }

            if (version != _buildVersion)  // —â–µ –æ–¥–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ rebuild –ø–æ—Å–µ—Ä–µ–¥–∏–Ω—ñ
            {
                // –ø–æ–≤–µ—Ä–Ω–µ–º–æ —É –ø—É–ª, —è–∫—â–æ —ñ–Ω—Å—Ç–∞–Ω—Å —É–∂–µ —Å—Ç–≤–æ—Ä–∏–ª–∏
                view.gameObject.SetActive(false);
                view.transform.SetParent(transform, false);
                _pool.Push(view);
                yield break;
            }

            view.Bind(data, unlocked, _onPlant);
        }
        System.Collections.IEnumerator ShowCo()
        {
            // 0) –∞–∫—Ç–∏–≤—É—î–º–æ root, –∞–ª–µ —Ä–æ–±–∏–º–æ –π–æ–≥–æ –Ω–µ–≤–∏–¥–∏–º–∏–º / –Ω–µ—ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º
            if (root != null) root.SetActive(true);
            if (infobar != null) infobar.SetActive(false);
            if (cg != null)
            {
                cg.alpha = 0f;
                cg.interactable = true;
                cg.blocksRaycasts = true;
            }
            SetInteractable(false);

            // 1) –®–í–ò–î–ö–ò–ô –ø—ñ–¥—ñ–≥—Ä—ñ–≤ —É –ø–∞–º‚Äô—è—Ç—å –¢–æ–ø-N —ñ–∫–æ–Ω–æ–∫ (—â–æ–± –∫–∞—Ä—Ç–∫–∏ –æ–¥—Ä–∞–∑—É –º–∞–ª–∏ —Å–ø—Ä–∞–π—Ç–∏)
            if (!_prewarmed)
                StartCoroutine(PrewarmTopIconsToMemoryCo(warmTopCount, warmTimeoutMs)); // —Ñ–æ–Ω–æ–º, –Ω–µ –±–ª–æ–∫—É—î–º–æ –ø–æ–∫–∞–∑

            // 2) –¢–µ–ø–µ—Ä –±—É–¥—É—î–º–æ —Å–ø–∏—Å–æ–∫ (–∫–∞—Ä—Ç–∫–∏ –æ–¥—Ä–∞–∑—É –≤—ñ–∑—å–º—É—Ç—å —ñ–∫–æ–Ω–∫–∏ –∑ –ø–∞–º‚Äô—è—Ç—ñ ‚Üí –±–µ–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ)
            BuildList();

            // 3) (–æ–ø—Ü—ñ–π–Ω–æ) –¥–∏—Å–∫–æ–≤–∏–π –ø—Ä–µ—Ñ–µ—Ç—á —Ä–µ—à—Ç–∏ ‚Äî –º–æ–∂–Ω–∞ —Ñ–æ–Ω–æ–º
            if (_all != null) StartCoroutine(PrewarmIconsCo());

            // 4) –ø—Ä–æ—è–≤–ª—è—î–º–æ –ø–∞–Ω–µ–ª—å —ñ —Ä–æ–±–∏–º–æ —ó—ó —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—é
            if (cg != null)
            {
                float t = 0f;
                while (t < 1f)
                {
                    t += Time.deltaTime * 6f;
                    cg.alpha = Mathf.Clamp01(t);
                    yield return null;
                }
                cg.interactable = true;
                cg.blocksRaycasts = true;
            }
            SetInteractable(true);
        }
        System.Collections.IEnumerator PrewarmTopIconsToMemoryCo(int topCount, int timeoutMs)
        {
            // —Ñ–æ—Ä–º—É—î–º–æ —Ç–æ–π —Å–∞–º–∏–π –ø–æ—Ä—è–¥–æ–∫, —â–æ —ñ –≤ BuildList, –∞–ª–µ –ë–ï–ó —ñ–Ω—Å—Ç–∞–Ω—Å–∏–Ω–≥—É –∫–∞—Ä—Ç–æ–∫
            if (_all == null || _all.Count == 0) yield break;

            int level = _playerLevel;
            var source = _all.Where(p => p.IsActive).ToList();

            var exactNext = source.FirstOrDefault(p => p.UnlockLevel == level + 1);
            var fallbackNext = source.Where(p => p.UnlockLevel > level).OrderBy(p => p.UnlockLevel).FirstOrDefault();
            var nextLocked = exactNext ?? fallbackNext;

            var available = source.Where(p => p.UnlockLevel <= level).OrderByDescending(p => p.UnlockLevel);

            var display = new System.Collections.Generic.List<PlantInfo>(topCount + 1);
            if (nextLocked != null) display.Add(nextLocked);
            foreach (var p in available)
            {
                if (display.Count >= topCount) break;
                display.Add(p);
            }

            // –≥–æ—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á—ñ–≤ (—ñ–∫–æ–Ω–∫–∞ grown ‚Äî –Ω–∞–π—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ñ—à–∞ –≤ –ø—ñ–∫–µ—Ä—ñ)
            var keys = new System.Collections.Generic.List<string>(display.Count);
            foreach (var p in display)
            {
                if (!string.IsNullOrEmpty(p.IconGrown)) keys.Add(p.IconGrown);
            }
            if (keys.Count == 0) yield break;

            // —Ç–µ–ø–µ—Ä –ø—ñ–¥—ñ–≥—Ä—ñ—î–º–æ —Å–ø—Ä–∞–π—Ç–∏ –≤ –ü–ê–ú‚Äô–Ø–¢–¨ (RemoteSpriteCache._mem),
            // —â–æ–± –∫–∞—Ä—Ç–∫–∏ –≤ Bind() –∑–º–æ–≥–ª–∏ –≤–∑—è—Ç–∏ —ó—Ö –º–∏—Ç—Ç—î–≤–æ —á–µ—Ä–µ–∑ TryGetInMemory(...)
            var sw = System.Diagnostics.Stopwatch.StartNew();
            foreach (var key in keys)
            {
                if (sw.ElapsedMilliseconds > timeoutMs) break; // –º'—è–∫–∏–π —Ç–∞–π–º–∞—É—Ç, —â–æ–± –Ω–µ –∑–∞—Ç—è–≥—É–≤–∞—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
                var task = RemoteSpriteCache.GetSpriteAsync(key);
                while (!task.IsCompleted) yield return null; // –¥–∞—î–º–æ –≤–∏–∫–æ–Ω–∞—Ç–∏—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—é/—Å—Ç–≤–æ—Ä–µ–Ω–Ω—é Sprite
            }
        }
        void AddItemImmediate(PlantInfo data, bool unlocked)
        {
            if (content == null || itemPrefab == null) return;

            PlantOptionItemView view;
            if (_pool.Count > 0)
            {
                view = _pool.Pop();
                view.transform.SetParent(content, false);
                view.gameObject.SetActive(true);
            }
            else
            {
                view = Instantiate(itemPrefab, content);
            }
            view.Bind(data, unlocked, _onPlant);
        }
        void BuildListImmediate()
        {
            if (content == null || itemPrefab == null)
            {
                Debug.LogError("[PlantSelectionPanel] content/itemPrefab –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ", this);
                return;
            }
            if (_all == null)
            {
                Debug.LogWarning("[PlantSelectionPanel] –î–∞–Ω—ñ —â–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ñ (SetData –Ω–µ –≤–∏–∫–ª–∏–∫–∞–Ω–æ)", this);
                ClearContent();
                return;
            }

            ClearContent();

            var source = _all.Where(p => p.IsActive).ToList();
            int level = _playerLevel;

            var exactNext = source.FirstOrDefault(p => p.UnlockLevel == level + 1);
            var fallbackNext = source.Where(p => p.UnlockLevel > level).OrderBy(p => p.UnlockLevel).FirstOrDefault();
            var nextLocked = exactNext ?? fallbackNext;

            if (nextLocked != null) AddItemImmediate(nextLocked, unlocked: false);

            foreach (var p in source.Where(p => p.UnlockLevel <= level).OrderByDescending(p => p.UnlockLevel))
                AddItemImmediate(p, unlocked: true);
        }
        public void PrebuildSilently()
        {
            // 1) –ë—É–¥—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –°–ò–ù–•–†–û–ù–ù–û (–ø—Ä–∞—Ü—é—î –Ω–∞–≤—ñ—Ç—å –∫–æ–ª–∏ GO –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π)
            BuildListImmediate();

            // 2) –§–æ—Ä—Å–∏–º–æ –ª–µ–π–∞—É—Ç, —â–æ–± —É–∂–µ –±—É–ª–∏ —Ä–æ–∑–º—ñ—Ä–∏/–ø–æ–∑–∏—Ü—ñ—ó
            if (content is RectTransform rt)
                LayoutRebuilder.ForceRebuildLayoutImmediate(rt);

            // 3) –í–∏—Å—Ç–∞–≤–ª—è—î–º–æ Left = 0, –ø–æ–∫–∏ –ø–∞–Ω–µ–ª—å —â–µ ¬´–∑–∞ –∫–∞–¥—Ä–æ–º¬ª
            var rtRoot = (root != null ? root.GetComponent<RectTransform>() : GetComponent<RectTransform>());
            if (rtRoot != null)
            {
                var p = rtRoot.anchoredPosition;
                p.x = 0f;
                rtRoot.anchoredPosition = p;
            }

            // 4) –•–æ–≤–∞—î–º–æ –ø–∞–Ω–µ–ª—å: –∞–ª—å—Ñ–∞ 0, –Ω–µ—ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞, root OFF, —Å–∞–º GO OFF
            if (cg != null) { cg.alpha = 0f; cg.interactable = false; cg.blocksRaycasts = false; }
            if (root != null) root.SetActive(false);
            gameObject.SetActive(false);
        }
        public async System.Threading.Tasks.Task PrewarmAtStartupAsync()
        {
            // 0) –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω—ñ –¥–∞–Ω—ñ
            if (_all == null || _all.Count == 0) return;

            // 1) –ü–†–ï–§–ï–¢–ß —É—Å—ñ—Ö –≤–∏–¥–∏–º–∏—Ö —ñ–∫–æ–Ω–æ–∫ (grown) –Ω–∞ –¥–∏—Å–∫, –±–µ–∑ –∫–æ—Ä—É—Ç–∏–Ω
            var allKeys = new System.Collections.Generic.HashSet<string>();
            foreach (var p in _all)
                if (p.IsActive && !string.IsNullOrEmpty(p.IconGrown))
                    allKeys.Add(p.IconGrown);
            if (allKeys.Count > 0)
                await RemoteSpriteCache.PrefetchToDiskOnly(allKeys, maxParallel: 4, softTimeoutMs: 2000);

            // 2) –ü—Ä–æ–≥—Ä—ñ–≤–∞—î–º–æ –≤ –ü–ê–ú'–Ø–¢–¨ —Ç–æ–ø-—ñ–∫–æ–Ω–∫–∏ (—É —Ç–æ–º—É –∂ –ø–æ—Ä—è–¥–∫—É, —â–æ –π —É —Å–ø–∏—Å–∫—É)
            int level = _playerLevel;
            var source = _all.Where(p => p.IsActive).ToList();
            var exactNext = source.FirstOrDefault(p => p.UnlockLevel == level + 1);
            var fallbackNext = source.Where(p => p.UnlockLevel > level).OrderBy(p => p.UnlockLevel).FirstOrDefault();
            var nextLocked = exactNext ?? fallbackNext;

            var display = new System.Collections.Generic.List<PlantInfo>(warmTopCount + 1);
            if (nextLocked != null) display.Add(nextLocked);
            foreach (var p in source.Where(p => p.UnlockLevel <= level).OrderByDescending(p => p.UnlockLevel))
            {
                if (display.Count >= warmTopCount) break;
                display.Add(p);
            }

            foreach (var p in display)
            {
                if (string.IsNullOrEmpty(p.IconGrown)) continue;
                var t = RemoteSpriteCache.GetSpriteAsync(p.IconGrown);
                while (!t.IsCompleted) await System.Threading.Tasks.Task.Yield(); // –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–∞–¥—Ä—É
            }

            // 3) –ë—É–¥—É—î–º–æ —Å–ø–∏—Å–æ–∫ –°–ò–ù–•–†–û–ù–ù–û (–ø—Ä–∞—Ü—é—î —ñ –∫–æ–ª–∏ GO –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π)
            BuildListImmediate();

            // 4) –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –ª–µ–π–∞—É—Ç—É —ñ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó Left=0
            if (content is RectTransform rt)
                LayoutRebuilder.ForceRebuildLayoutImmediate(rt);
            var rtRoot = (root != null ? root.GetComponent<RectTransform>() : GetComponent<RectTransform>());
            if (rtRoot != null)
            {
                var p = rtRoot.anchoredPosition; p.x = 0f; rtRoot.anchoredPosition = p;
            }

            // 5) –•–æ–≤–∞—î–º–æ –ø–∞–Ω–µ–ª—å –ø–æ–≤–Ω—ñ—Å—Ç—é (—è–∫ Close), —â–æ–± –ø–µ—Ä—à–∏–π –ø–æ–∫–∞–∑ –±—É–≤ –º–∏—Ç—Ç—î–≤–∏–º
            if (cg != null) { cg.alpha = 0f; cg.interactable = false; cg.blocksRaycasts = false; }
            if (root != null) root.SetActive(false);
            gameObject.SetActive(false);

            _prewarmed = true;
        }
    }
}