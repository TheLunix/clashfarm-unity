namespace ClashFarm.Garden
{
    using UnityEngine;
    using UnityEngine.UI;
    using TMPro;
    using System;
    using System.Collections;
    using System.Threading.Tasks;

    public sealed class PlotUnlockPanel : MonoBehaviour
    {
        [Header("Root & Content")]
        [SerializeField] private GameObject root;
        [SerializeField] private TMP_Text title;
        [SerializeField] private TMP_Text priceText;

        [Header("Buttons")]
        [SerializeField] private Button btnConfirm;
        [SerializeField] private Button btnCancel;

        [Header("Inline error (shows for N seconds)")]
        [SerializeField] private GameObject errorPanel;   // üëà –ø–µ—Ä–µ—Ç—è–≥–Ω–∏ —Å—é–¥–∏ –Ω–µ–≤–µ–ª–∏–∫—É –ø–∞–Ω–µ–ª—å/—Ä—è–¥–æ–∫ –ø–æ–º–∏–ª–∫–∏
        [SerializeField] private TMP_Text errorText;    // üëà —Ç–µ–∫—Å—Ç —É—Å–µ—Ä–µ–¥–∏–Ω—ñ errorPanel
        [SerializeField] private float errorDuration = 5f;

        private Func<Task> _onConfirm;
        private Coroutine _hideErrorCo;

        void Awake()
        {
            if (btnConfirm != null)
                btnConfirm.onClick.AddListener(OnConfirmClick);

            if (btnCancel != null)
                btnCancel.onClick.AddListener(() => { Close(); });

            //Close();
            HideErrorImmediate();
        }
        private async void OnConfirmClick()
        {
            if (_onConfirm == null) return;
            SetInteractable(false);
            try { await _onConfirm(); }      // –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä —Å–∞–º –≤–∏—Ä—ñ—à–∏—Ç—å: –∑–∞–∫—Ä–∏–≤–∞—Ç–∏ –ø–∞–Ω–µ–ª—å —á–∏ –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É
            finally { SetInteractable(true); }
        }
        public void Open(int uiSlotIndexClicked, int price, Func<System.Threading.Tasks.Task> onConfirm)
        {
            _onConfirm = onConfirm;

            SetInteractable(true);
            HideErrorImmediate();

            // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–æ–º–µ—Ä –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≥—Ä—è–¥–∫–∏ –∑ –¥–∞–Ω–∏—Ö —Å–µ—Å—ñ—ó (–∞–±–æ –¥–µ—Ñ–æ–ª—Ç 4)
            int nextUi = 4;
            if (ClashFarm.Garden.GardenSession.I != null)
            {
                int unlocked = 0;
                foreach (var p in ClashFarm.Garden.GardenSession.I.Plots)
                    if (p != null && p.Unlocked) unlocked++;
                nextUi = Mathf.Clamp(unlocked + 1, 1, 12);
            }
            if (ClashFarm.Garden.GardenSession.I != null)
            {
                int unlocked = 0;
                foreach (var p in ClashFarm.Garden.GardenSession.I.Plots) if (p != null && p.Unlocked) unlocked++;
                nextUi = Mathf.Clamp(unlocked + 1, 1, 12);
            }

            if (title) title.text = $"–í—ñ–¥–∫—Ä–∏—Ç–∏ –≥—Ä—è–¥–∫—É ‚Ññ{nextUi}?";
            if (priceText) priceText.text = $"–¶—ñ–Ω–∞: <sprite=1> {price}";
            // ‚ûä –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ —Å–æ–±—ñ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É
            int gold = (PlayerSession.I != null && PlayerSession.I.Data != null) ? PlayerSession.I.Data.playergold : 0;
            bool canAfford = gold >= price;

            // ‚ûã –ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ —Ü—ñ–Ω—É, —è–∫—â–æ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î
            if (priceText)
                priceText.text = canAfford ? $"–¶—ñ–Ω–∞: <sprite=1> {price}" : $"–¶—ñ–Ω–∞: <sprite=1> <color=#FF5555>{price}</color>";

            // ‚ûå –í–∏–º–∏–∫–∞—î–º–æ "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", —è–∫—â–æ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –∑–æ–ª–æ—Ç–∞
            if (btnConfirm) btnConfirm.interactable = canAfford;

            // (–Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ) –Ø–∫—â–æ –≥—Ä—è–¥–æ–∫ —É–∂–µ –º–∞–∫—Å–∏–º—É–º ‚Äî —Ç–µ–∂ –±–ª–æ–∫—É—î–º–æ
            int maxSlots = 12;
            if (title && nextUi > maxSlots)
            {
                title.text = "–ú–∞–∫—Å–∏–º—É–º –≥—Ä—è–¥–æ–∫ –≤—ñ–¥–∫—Ä–∏—Ç–æ";
                if (btnConfirm) btnConfirm.interactable = false;
            }
            if (root) root.SetActive(true);
            else gameObject.SetActive(true);

            transform.SetAsLastSibling();
        }

        public void Close()
        {
            if (root) root.SetActive(false);
            else gameObject.SetActive(false);

            _onConfirm = null;
            SetInteractable(true);   // —â–æ–± –Ω–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–æ—á–Ω–æ –º–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏
            HideErrorImmediate();
        }

        // === Error helpers ===

        public void ShowError(string msg, float? seconds = null)
        {
            if (_hideErrorCo != null) { StopCoroutine(_hideErrorCo); _hideErrorCo = null; }

            if (errorText != null && !string.IsNullOrEmpty(msg))
                errorText.text = msg;

            if (errorPanel != null)
                errorPanel.SetActive(true);

            _hideErrorCo = StartCoroutine(HideErrorAfter(seconds ?? errorDuration));
        }

        private IEnumerator HideErrorAfter(float sec)
        {
            yield return new WaitForSecondsRealtime(sec);
            HideErrorImmediate();
            _hideErrorCo = null;
        }

        private void HideErrorImmediate()
        {
            if (errorPanel != null) errorPanel.SetActive(false);
            if (_hideErrorCo != null) { StopCoroutine(_hideErrorCo); _hideErrorCo = null; }
        }

        public void SetInteractable(bool v)
        {
            if (btnConfirm) btnConfirm.interactable = v;
            if (btnCancel) btnCancel.interactable = v;
        }
    }
}